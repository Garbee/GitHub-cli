name: Build

on:
  push:
    branches: [ main ]

permissions:
  contents: read

env:
  IMAGE_NAME: github-cli

jobs:
  build-platform:
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: amd64
            platform: linux/amd64
            runner: ubuntu-latest
          - arch: arm64
            platform: linux/arm64
            runner: ubuntu-24.04-arm
    name: Build (${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Extract GH_VERSION from Dockerfile
        id: version
        run: |
          set -euo pipefail
          v=$(grep -E '^ARG GH_VERSION=' Dockerfile | head -1 | cut -d= -f2 | tr -d '"')
          echo "gh_version=$v" >> "$GITHUB_OUTPUT"

      - name: Set up Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Build image (no push) and export tar
        id: build
        run: |
          set -euo pipefail
          arch='${{ matrix.arch }}'
          platform='${{ matrix.platform }}'
            version='${{ steps.version.outputs.gh_version }}'
          echo "Building gh-cli $version for $platform (arch=$arch)"
          out_dir="out-$arch"
          mkdir -p "$out_dir"
          # Extract label values from Dockerfile (fallback to empty if not matched)
          get_label() {
            local key="$1"
            local line
            line=$(grep -E "org.opencontainers.image.${key}=" -m1 Dockerfile || true)
            [ -z "$line" ] && { echo ""; return; }
            printf '%s\n' "$line" | sed -E "s/.*org.opencontainers.image.${key}=\"([^\"]*)\".*/\1/"
          }
          desc=$(get_label description)
          echo '::group::Labels summary:'
          printf ' - %s=%s\n' version "$version" description "$desc"
          echo '::endgroup::'
          docker buildx build \
            --platform "$platform" \
            --build-arg GH_VERSION="$version" \
            -t gh-cli-temp:$arch \
            --output type=docker,dest="$out_dir/gh-cli-${arch}.tar",annotation-index.org.opencontainers.image.description="$desc" .
          printf 'arch=%s\nversion=%s\n' "$arch" "$version" > "$out_dir/image-${arch}.txt"
          echo "arch=$arch" >> "$GITHUB_OUTPUT"
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: Verify OCI labels present
        run: |
          set -euo pipefail
          arch='${{ steps.build.outputs.arch }}'
          # Load temp to inspect (ephemeral)
          tar="out-${{ steps.build.outputs.arch }}/gh-cli-${{ steps.build.outputs.arch }}.tar"
          docker load -i "$tar" >/dev/null
          img="gh-cli-temp:${{ steps.build.outputs.arch }}"
          required=( \
            org.opencontainers.image.title \
            org.opencontainers.image.description \
            org.opencontainers.image.source \
            org.opencontainers.image.version \
            org.opencontainers.image.licenses )
          missing=()
          printf 'Discovered label values on %s:\n' "$img"
          for key in "${required[@]}"; do
            val=$(docker image inspect "$img" -f "{{ index .Config.Labels \"$key\" }}" 2>/dev/null || true)
            if [ -n "$val" ]; then
              printf '  - %s=%s\n' "$key" "$val"
            else
              missing+=("$key")
            fi
          done

          if [ ${#missing[@]} -gt 0 ]; then
            echo "::error title=Missing Required OCI Labels::${missing[*]} missing on $img"
            {
              echo '## ❌ Missing Required OCI Labels'
              echo
              echo "Image: \`$img\` (arch=$arch)"
              echo
              echo '| Label | Status |'
              echo '|-------|--------|'
              for key in "${required[@]}"; do
                if printf '%s\n' "${missing[@]}" | grep -Fxq "$key"; then
                  echo "| $key | ❌ Missing |"
                else
                  val=$(docker image inspect "$img" -f "{{ index .Config.Labels \"$key\" }}" 2>/dev/null || true)
                  short="$val"
                  [ ${#short} -gt 80 ] && short="${short:0:77}..."
                  esc=${short//|/\|}
                  echo "| $key | ✅ Present (${esc}) |"
                fi
              done
              echo
              echo '### How to Fix'
              echo '1. Ensure each label is defined in the final image stage of the Dockerfile.'
              echo '2. If labels are added only to an intermediate stage, re-declare with `LABEL` in the final stage.'
              echo '3. Validate locally: `docker build -t test . && docker inspect test | jq .[0].Config.Labels`'
              echo '4. Re-run the pipeline after adjusting the Dockerfile.'
              echo
              echo '**Required labels:**'
              printf ' - %s\n' "${required[@]}"
            } >> "$GITHUB_STEP_SUMMARY"
            exit 1
          else
            {
              echo '## ✅ OCI Labels Verified'
              echo
              echo "All required labels present on image \`$img\` (arch=$arch)."
            } >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Upload build artifact (image + metadata)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: build-${{ matrix.arch }}
          retention-days: 2
          path: out-${{ matrix.arch }}
